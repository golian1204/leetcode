"""
Given a string s, find the length of the longest substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 
Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
"""

class Solution(object):

    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        sub_str = ''
        max_len_sub_str = 0
        for letter in s:
            if letter in sub_str:
                max_len_sub_str = max(max_len_sub_str, len(sub_str))
                sub_str = sub_str[sub_str.find(letter) + 1:]
            sub_str += letter
        max_len_sub_str = max(max_len_sub_str, len(sub_str))
        return max_len_sub_str

class SolutionBest(object):

    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        map = {}
        start_index = 0
        max_len = 0
        for i, letter in enumerate(s):
            if letter in map:
                start_index = max(map[letter] + 1, start_index)
            max_len = max(max_len, i - start_index + 1)
            map[letter] = i
        return max_len
