"""
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
"""

from typing import List
import unittest
import random


class ListNode(object):
    """Definition for singly-linked list"""

    def __init__(self, val=0, next_node=None):
        self.val = val
        self.next = next_node

    def get(self) -> List[int]:
        """Creating a list representation of the data"""
        result = [self.val]
        node = self.next
        while node:
            result.append(node.val)
            node = node.next
        return result


class Solution(object):
    """
    Solving the "Add Two Numbers" problem
    Time complexity : O(max⁡(m,n))
    Space complexity : O(1)
    """

    @staticmethod
    def add_two_numbers(l1: ListNode, l2: ListNode) -> ListNode:
        """
        You are given two non-empty linked lists representing two non-negative integers.
        The digits are stored in reverse order, and each of their nodes contains a single digit.
        Add the two numbers and return the sum as a linked list.
        You may assume the two numbers do not contain any leading zero, except the number 0 itself.
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        head = ListNode()
        node = head
        remainder = 0
        while l1 or l2 or remainder:
            if l1:
                remainder += l1.val
                l1 = l1.next
            if l2:
                remainder += l2.val
                l2 = l2.next
            node.next = ListNode(remainder % 10)
            remainder //= 10
            node = node.next
        return head.next


class TestSolution(unittest.TestCase):
    """Test solving the "Add Two Numbers" problem"""

    def setUp(self):
        self.solution = Solution()

    @staticmethod
    def _make_linked_list(list_val: List[int]) -> ListNode:
        # It is guaranteed that the list represents a number that does not have leading zeros.
        if not list_val or (len(list_val) > 1 and list_val[-1] == 0):
            head = ListNode()
        else:
            head = ListNode(list_val[0])
            node = head
            for val in list_val[1:]:
                node.next = ListNode(val)
                node = node.next
        return head

    def test_example_1(self):
        self.assertEqual(
            self.solution.add_two_numbers(l1=self._make_linked_list([2, 4, 3]),
                                          l2=self._make_linked_list([5, 6, 4])).get(),
            self._make_linked_list([7, 0, 8]).get()
        )

    def test_example_2(self):
        self.assertEqual(
            self.solution.add_two_numbers(l1=self._make_linked_list([0]),
                                          l2=self._make_linked_list([0])).get(),
            self._make_linked_list([0]).get()
        )

    def test_example_3(self):
        self.assertEqual(
            self.solution.add_two_numbers(l1=self._make_linked_list([9, 9, 9, 9, 9, 9, 9]),
                                          l2=self._make_linked_list([9, 9, 9, 9])).get(),
            self._make_linked_list([8, 9, 9, 9, 0, 0, 0, 1]).get()
        )

    def test_example_emtpy_list(self):
        self.assertEqual(
            self.solution.add_two_numbers(l1=self._make_linked_list([]),
                                          l2=self._make_linked_list([1, 2, 3, 0])).get(),
            self._make_linked_list([]).get()
        )

    @staticmethod
    def _make_random_integers() -> int:
        return random.randint(0, 10**100 - 1)

    def test_example_random(self):
        for k in range(1, 10000):
            int1 = self._make_random_integers()
            int2 = self._make_random_integers()
            total_int = int1 + int2
            self.assertEqual(
                self.solution.add_two_numbers(l1=self._make_linked_list([int(i) for i in str(int1)[::-1]]),
                                              l2=self._make_linked_list([int(i) for i in str(int2)[::-1]])).get(),
                self._make_linked_list([int(i) for i in str(total_int)[::-1]]).get()
            )


if __name__ == "__main__":
    unittest.main()
