"""
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
"""


class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1 = len(nums1)
        len2 = len(nums2)
        len_total = len1 + len2
        if not len_total:
            return None
        if len_total % 2:
            index_1 = int((len_total - 1) / 2)
            index_2 = index_1
        else:
            index_2 = int(len_total / 2)
            index_1 = index_2 - 1

        ind1 = 0
        ind2 = 0
        num_t_1 = None
        num_t_2 = None

        for i in range(index_2 + 1):
            num1 = nums1[ind1] if ind1 < len1 else None
            num2 = nums2[ind2] if ind2 < len2 else None

            if num1 is not None and num2 is not None:
                if num1 <= num2:
                    num_i = num1
                    ind1 += 1
                else:
                    num_i = num2
                    ind2 += 1
            elif num1 is not None:
                num_i = num1
                ind1 += 1
            else:
                num_i = num2
                ind2 += 1

            if i == index_1:
                num_t_1 = num_i
            if i == index_2:
                num_t_2 = num_i

        return (num_t_1 + num_t_2) / 2.0
